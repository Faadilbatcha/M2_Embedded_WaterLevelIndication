
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000140  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  000001d4  2**0
                  ALLOC
  3 .stab         00000780  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d43  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001697  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016a8  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00001cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000227a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  88:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <USARTInit>:
//String message; //Bluetooth message

void USARTInit(uint16_t ubrr_value)
{
    //Set Baud rate
    UBRR0L = ubrr_value;
  90:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    UBRR0H = (ubrr_value>>8)&0X00ff ;
  94:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    UCSR0C = (1<<UMSEL00)|(1<<UCSZ01)|(1<<UCSZ00);
  98:	86 e4       	ldi	r24, 0x46	; 70
  9a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>

    //Enable Transmitter Receiver
    UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0)|(1<<TXCIE0);
  9e:	88 ed       	ldi	r24, 0xD8	; 216
  a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  a4:	08 95       	ret

000000a6 <USARTReadChar>:
}

char USARTReadChar()
{
    //Wait until data is available
    while(!(UCSR0A & (1<<RXC0)))
  a6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
  aa:	87 ff       	sbrs	r24, 7
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <USARTReadChar>
    {
        //DO NOTHING
    }
    return UDR0;
  ae:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
  b2:	08 95       	ret

000000b4 <USARTWriteChar>:

void USARTWriteChar(char *data)
{
  b4:	fc 01       	movw	r30, r24
    //wait until transmitter is ready
    while (!(UCSR0A & (1<<UDRE0)))
  b6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
  ba:	95 ff       	sbrs	r25, 5
  bc:	fc cf       	rjmp	.-8      	; 0xb6 <USARTWriteChar+0x2>
    {
        //DO  NOTHING
    }
    //TO WRITE THE DATA TO USART BUFFER
    UDR0 = *data;
  be:	80 81       	ld	r24, Z
  c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  c4:	08 95       	ret

000000c6 <main>:
//String message; //Bluetooth message

void USARTInit(uint16_t ubrr_value)
{
    //Set Baud rate
    UBRR0L = ubrr_value;
  c6:	87 e6       	ldi	r24, 0x67	; 103
  c8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    UBRR0H = (ubrr_value>>8)&0X00ff ;
  cc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    UCSR0C = (1<<UMSEL00)|(1<<UCSZ01)|(1<<UCSZ00);
  d0:	86 e4       	ldi	r24, 0x46	; 70
  d2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>

    //Enable Transmitter Receiver
    UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0)|(1<<TXCIE0);
  d6:	88 ed       	ldi	r24, 0xD8	; 216
  d8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>


int main(void)
{
    USARTInit(103);
    DDRB |= (1<<DDB2)|(1<<DDB3)|(1<<DDB0)|(1<<DDB4); /*B2&B3 are indicator LED's,B0 is Ultrasonic Sensor Trigger O/P,B4 Motor load*/
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	8d 61       	ori	r24, 0x1D	; 29
  e0:	84 b9       	out	0x04, r24	; 4
    DDRB &= ~(1<<DDB1);                              /*B1 is Ultrasonic Sensor Echo I/P*/
  e2:	21 98       	cbi	0x04, 1	; 4
//String message; //Bluetooth message

void USARTInit(uint16_t ubrr_value)
{
    //Set Baud rate
    UBRR0L = ubrr_value;
  e4:	37 e6       	ldi	r19, 0x67	; 103
    UBRR0H = (ubrr_value>>8)&0X00ff ;
    UCSR0C = (1<<UMSEL00)|(1<<UCSZ01)|(1<<UCSZ00);
  e6:	26 e4       	ldi	r18, 0x46	; 70

    //Enable Transmitter Receiver
    UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0)|(1<<TXCIE0);
  e8:	98 ed       	ldi	r25, 0xD8	; 216
    while (!(UCSR0A & (1<<UDRE0)))
    {
        //DO  NOTHING
    }
    //TO WRITE THE DATA TO USART BUFFER
    UDR0 = *data;
  ea:	47 e5       	ldi	r20, 0x57	; 87
//String message; //Bluetooth message

void USARTInit(uint16_t ubrr_value)
{
    //Set Baud rate
    UBRR0L = ubrr_value;
  ec:	30 93 c4 00 	sts	0x00C4, r19	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    UBRR0H = (ubrr_value>>8)&0X00ff ;
  f0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    UCSR0C = (1<<UMSEL00)|(1<<UCSZ01)|(1<<UCSZ00);
  f4:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>

    //Enable Transmitter Receiver
    UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0)|(1<<TXCIE0);
  f8:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
}

char USARTReadChar()
{
    //Wait until data is available
    while(!(UCSR0A & (1<<RXC0)))
  fc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 100:	87 ff       	sbrs	r24, 7
 102:	fc cf       	rjmp	.-8      	; 0xfc <main+0x36>
    {
        //DO NOTHING
    }
    return UDR0;
 104:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    DDRB &= ~(1<<DDB1);                              /*B1 is Ultrasonic Sensor Echo I/P*/
    while(1){
        USARTInit(103);
        //duration = pulseIn(PORTB1,HIGH);
        //distance = (duration/2)*2.91;
        mydata = USARTReadChar();
 108:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <mydata>
        if (mydata=='A')
 10c:	81 34       	cpi	r24, 0x41	; 65
 10e:	61 f0       	breq	.+24     	; 0x128 <main+0x62>
            }*/
            USARTWriteChar("Water level's low, Motor Turned On");/*If interfaced, Message will be sent to Connected Bluetooth user*/
            //bluetooth.write(message, i);
            //Loads
        }
        else if(mydata=='B'){
 110:	82 34       	cpi	r24, 0x42	; 66
 112:	61 f7       	brne	.-40     	; 0xec <main+0x26>
            PORTB &=~(1<<PORTB2);
 114:	2a 98       	cbi	0x05, 2	; 5
            PORTB &=~(1<<PORTB4);
 116:	2c 98       	cbi	0x05, 4	; 5
            PORTB |=(1<<PORTB3);
 118:	2b 9a       	sbi	0x05, 3	; 5
}

void USARTWriteChar(char *data)
{
    //wait until transmitter is ready
    while (!(UCSR0A & (1<<UDRE0)))
 11a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 11e:	85 ff       	sbrs	r24, 5
 120:	fc cf       	rjmp	.-8      	; 0x11a <main+0x54>
    {
        //DO  NOTHING
    }
    //TO WRITE THE DATA TO USART BUFFER
    UDR0 = *data;
 122:	40 93 c6 00 	sts	0x00C6, r20	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 126:	e2 cf       	rjmp	.-60     	; 0xec <main+0x26>
        //duration = pulseIn(PORTB1,HIGH);
        //distance = (duration/2)*2.91;
        mydata = USARTReadChar();
        if (mydata=='A')
        {
            PORTB |=(1<<PORTB2);
 128:	2a 9a       	sbi	0x05, 2	; 5
            PORTB |=(1<<PORTB4);
 12a:	2c 9a       	sbi	0x05, 4	; 5
            PORTB &=~(1<<PORTB3);
 12c:	2b 98       	cbi	0x05, 3	; 5
}

void USARTWriteChar(char *data)
{
    //wait until transmitter is ready
    while (!(UCSR0A & (1<<UDRE0)))
 12e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 132:	85 ff       	sbrs	r24, 5
 134:	fc cf       	rjmp	.-8      	; 0x12e <main+0x68>
    {
        //DO  NOTHING
    }
    //TO WRITE THE DATA TO USART BUFFER
    UDR0 = *data;
 136:	40 93 c6 00 	sts	0x00C6, r20	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 13a:	d8 cf       	rjmp	.-80     	; 0xec <main+0x26>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
